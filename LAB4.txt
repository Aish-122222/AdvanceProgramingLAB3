Lab 4: Backtracking

1) Maze Problem

#include <bits/stdc++.h>
using namespace std;
void rec(vector<vector<int>> &grid, vector<vector<int>> &vis, vector<string> &ans, string str, int x, int y)
{ 
    int n = grid.size(), m = grid[0].size();
    if(x==n-1 && y==m-1)
    {
        ans.push_back(str); 
        return;
    }
    int dx[]={-1,1,0,0};
    int dy[]={0,0,-1,1};
    for(int i=0;i<4;i++)
    {
        int new_x = x+dx[i]; 
        int new_y = y+dy[i];
        if(new_x>=0 && new_y>=0 && new_x<n && new_y<m && grid[new_x][new_y]==1 && vis[new_x][new_y]==0)
        {
            vis[new_x][new_y] = 1; 
            if(i==0)
                str.push_back('U'); 
                else if(i==1) 
                    str.push_back('D'); 
                else if(i==2) 
                    str.push_back('L'); 
                else 
                    str.push_back('R');
        }
        rec(grid, vis, ans, str, new_x, new_y); 
        vis[new_x][new_y] = 0; 
        str.pop_back();
    }
}
int main()
{
    vector<string>ans; int n;
    cin>>n;
    vector<vector<int>> vis(n,vector<int>(n,0)), grid(n, vector<int>(n,0));
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            cin>>grid[i][j];
            rec(grid, vis, ans, "", 0, 0);
            if(ans.size()==0) 
                cout<<-1<<endl; 
            else for(auto it: ans) 
                cout<<it<<" "; 
            return 0;
        }
    }
}

2) Permutation of String

#include <bits/stdc++.h>
using namespace std;
void rec(vector<int> &vis, vector<string> &ans, string str, string s)
{
    if(str.size()==s.size())
    {
        ans.push_back(str); 
            return;
    }
    for(int i=0;i<s.size();i++)
    {
        if(vis[i]==0)
        {
            vis[i]-1;
            str.push_back(s[i]);
            rec(vis,ans,str,s);
            str.pop_back();
        }
        vis[i]=0;
    }
}
int main()
{
    vector<string>ans;
    string s = "abc";
    vector<int> vis(s.length(),0);
    rec(vis, ans, "", s);
    for(auto it: ans)
        cout<<it<<" ";
    return 0;
}

Output:
 

3) N- queen problem

#include <bits/stdc++.h>
using namespace std;
vector<vector<string> > answer;
void print_board()
{
	for (auto& str : answer[1]) {
		for (auto& letter : str)
			cout << letter << " ";
		cout << endl;
	}
	return;
}
int safe(int row, int col, vector<string>& board)
{
	for (int i = 0; i < board.size(); i++) {
		if (board[i][col] == 'Q')
			return false;
	}
	int i = row, j = col;
	while (i >= 0 && j >= 0)
		if (board[i--][j--] == 'Q')
			return false;
	i = row, j = col;
	while (i >= 0 && j < board.size())
		if (board[i--][j++] == 'Q')
			return false;
	return true;
}
void rec(vector<string> board, int row)
{
	if (row == board.size()) {
		answer.push_back(board);
		return;
	}
	for (int i = 0; i < board.size(); i++) {
		if (safe(row, i, board)) {
			board[row][i] = 'Q';
			rec(board, row + 1);
			board[row][i] = '.';
		}
	}
	return;
}
vector<vector<string> > solveNQueens(int n)
{
	string s;
	for (int i = 0; i < n; i++)
		s += '.';
	vector<string> board(n, s);
	rec(board, 0);
	return answer;
}
int main()
{
	clock_t start, end; 
	start = clock();
	cout << solveNQueens(4).size() << endl;
	end = clock();
	double time_taken
		= double(end - start) / double(CLOCKS_PER_SEC);
	cout << time_taken << " time was taken(in miliseconds)"
		<< endl;
	cout << "Out of " << answer.size()
		<< " solutions one is following" << endl;
	print_board();
}

Output:
