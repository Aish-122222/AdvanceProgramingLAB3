LAB -2: BST & AVL TREE

1)	Write a program to construct a Binary Search Tree and check by inserting the elements. 25,15, 5, 20, 40, 3, 6, 16, 21. 2.

2)	Write a program for deleting the elements from the above Binary Search Tree. Check it by deleting the elements 25, 40.

#include<bits/stdc++.h> using namespace std; class Node{
public:
int data; Node *left; Node *right;
Node(int data){
this->data = data; this->left = nullptr; this->right = nullptr;
}
};
class bst{ public:
Node *root=NULL; void insert(int key){
Node *newNode = new Node(key); Node *temp = this->root;
Node *parent = this->root; if(root==nullptr){
root = newNode; return;
}
while(temp!=nullptr){
parent = temp;
if(temp->data>key) temp = temp->left; else temp = temp->right;
}
if(parent->data>key) parent->left = newNode; if(parent->data<key) parent->right = newNode;
}
void inorder(Node *node){ if(node==nullptr) return; inorder(node->left); cout<<node->data<<endl; inorder(node->right);
}

Node *successor(int key){
Node *node = searchBst(key); if(node==nullptr) return node; node = node->right;
while(node->right!=nullptr and node!=nullptr) node = node->left;
 
return node;
}
Node *deleteNode(Node *&root, int key){ if (root == NULL)
return root; if (key < root->data)
root->left = deleteNode(root->left, key); else if (key > root->data)
root->right = deleteNode(root->right, key);
 
else{
 

if (root->left == NULL and root->right == NULL)	//0 child return NULL;
else if (root->left == NULL){	//1 child Node *temp = root->right;
free(root); return temp;
 
}
else if (root->right == NULL)
{
Node *temp = root->left; free(root);
return temp;
}
Node *temp = successor(root->right->data);	//2 child root->data = temp->data;
root->right = deleteNode(root->right, temp->data);
}
return root;
}
};
int main(){ bst obj;
int n,value,key; cin>>n;
for(int i=0;i<n;i++){ cin>>value; obj.insert(value);
}
cout<<"Enter the node to be deleted: "; cin>>key; obj.root=obj.deleteNode(obj.root,key); obj.inorder(obj.root);
}

3. Write a program to construct the AVL tree using proper rotations by inserting the elements. Check by inserting the elements 5, 10, 15, 20, 15, 40, 45, 80, 90

#include <bits/stdc++.h> using namespace std; class AVL
{
public:
int data; AVL *left;
 
AVL *right; int height;

AVL(int data)
{
this->data = data; left = NULL; right = NULL; this->height = 1;
}
~AVL()
{
delete left; delete right;
}
};

int node_height(AVL *node)
{
int hl, hr;
hl = node && node->left ? node->left->height : 0;
hr = node && node->right ? node->right->height : 0; return (hl > hr) ? hl + 1 : hr + 1;
}

int BalanceFactor(AVL *node)
{
int hl, hr;
hl = node && node->left ? node->left->height : 0;
hr = node && node->right ? node->right->height : 0; return hl - hr;
}

AVL *LL_rotation(AVL *node)
{ /// LL rotation function
AVL *node_lc = node->left;
AVL *node_rc = node_lc->right; // not node->right

node_lc->right = node; node->left = node_rc;

/// now modify height
node->height = node_height(node); node_lc->height = node_height(node_lc); return node_lc;
}

AVL *LR_rotation(AVL *node)
{ /// LR rotation function
AVL *node_lc = node->left; AVL *node_rc = node_lc->right;

node_lc->right = node_rc->left; node->left = node_rc->right;

node_rc->left = node_lc; node_rc->right = node;
 
/// now modify heights
node_lc->height = node_height(node_lc); node->height = node_height(node); node_rc->height = node_height(node_rc);

return node_rc;
}

AVL *RR_rotation(AVL *node)
{ /// RR rotation function
// edited here
AVL *node_rc = node->right; AVL *node_lc = node_rc->left;

node_rc->left = node; node->right = node_lc;

/// now modify heights
node->height = node_height(node); node_rc->height = node_height(node_rc);

return node_rc;
}

AVL *RL_rotation(AVL *node)
{ /// RL rotation function
// edited here
AVL *node_rc = node->right; AVL *node_lc = node_rc->left;

node_rc->left = node_lc->right; node->right = node_lc->left;

node_lc->right = node_rc; node_lc->left = node;

/// now modify heights
node->height = node_height(node); node_lc->height = node_height(node_lc); node_rc->height = node_height(node_rc);

return node_lc;
}

void printTree(AVL *root)
{
if (root == NULL)
{ /// base case return;
}
cout << root->data << ": "; if (root->left != NULL)
{
cout << "L" << root->left->data << ",";
}

if (root->right != NULL)
{
 
cout << "R" << root->right->data << ",";
}
cout << endl; printTree(root->left); printTree(root->right);
}

AVL *insert(AVL *node, int data)
{
if (node == NULL)
{
AVL *n = new AVL(data); return n;
}
if (data < node->data)
{
node->left = insert(node->left, data);
}
else if (data > node->data)
{
node->right = insert(node->right, data);
}
else
{
return node;
}

node->height = node_height(node); /// update height of nodes after insertion

if (BalanceFactor(node) == 2 && BalanceFactor(node->left) == 1)
{
/// LL rotation;
return LL_rotation(node);
}
else if (BalanceFactor(node) == 2 && BalanceFactor(node->left) == -1)
{
/// LR rotation;
return LR_rotation(node);
}
else if (BalanceFactor(node) == -2 && BalanceFactor(node->right) == -1)
{
/// RR rotation;
return RR_rotation(node);
}
else if (BalanceFactor(node) == -2 && BalanceFactor(node->right) == 1)
{
/// RL rotation;
return RL_rotation(node);
}

return node;
}

AVL *minDataNode(AVL *root)
{
if (!root) return root;
 
AVL *temp = root;
while (temp->left != NULL)
{
temp = temp->left;
}
return temp;
}

AVL *deleteData(AVL *node, int data)
{
if (node == NULL)
{
return NULL;
}
if (data > node->data)
{
node->right = deleteData(node->right, data);
}
else if (data < node->data)
{
node->left = deleteData(node->left, data);
}
else
{
if (node->left == NULL && node->right == NULL)
{
delete node; return NULL;
}
else if (node->right == NULL)
{
AVL *temp = node->left; node->left = NULL; delete node;
return temp;

else if (node->left == NULL)
{
AVL *temp = node->right; node->right = NULL; delete node;
return temp;
}
else
{
AVL *minNode = node->right; while (minNode->left != NULL)
{
minNode = minNode->left;
}
int rightMin = minNode->data; node->data = rightMin;
node->right = deleteData(node->right, rightMin); // update node step
}
}
if (node == NULL)
{
return node;
 
}
node->height = node_height(node); /// update height of nodes after insertion

if (BalanceFactor(node) == 2 && BalanceFactor(node->left) == 1)
{
/// LL rotation;
return LL_rotation(node);
}
else if (BalanceFactor(node) == 2 && BalanceFactor(node->left) == -1)
{
/// LR rotation;
return LR_rotation(node);
}
else if (BalanceFactor(node) == -2 && BalanceFactor(node->right) == -1)
{
/// RR rotation;
return RR_rotation(node);
}
else if (BalanceFactor(node) == -2 && BalanceFactor(node->right) == 1)
{
/// RL rotation;
return RL_rotation(node);
}

return node;
}

int main()
{
AVL *root = new AVL(10); root = insert(root, 90);
root = insert(root, 50); root = insert(root, 70); root = insert(root, 28); root = insert(root, 19); root = insert(root, 65); root = insert(root, 57); printTree(root);
root = deleteData(root, 90); cout << endl; printTree(root);
return 0;
}
