1)
#include&lt;iostream&gt;
#include&lt;stdio.h&gt;
using namespace std;
#define INFINITY 9999
#define max 5
void dijkstra(int G[max][max],int n,int
startnode);
int main() {
int
G[max][max]={{0,1,0,3,10},{1,0,5,0,0},{0,5,0,2,
1},{3,0,2,0,6},{10,0,1,6,0}};
int n=5;
int u=0;
dijkstra(G,n,u);
return 0;
}
void dijkstra(int G[max][max],int n,int
startnode) {
int
cost[max][max],distance[max],pred[max];
int
visited[max],count,mindistance,nextnode,i,j;
for(i=0;i&lt;n;i++)
for(j=0;j&lt;n;j++)
if(G[i][j]==0)
cost[i][j]=INFINITY;
else
cost[i][j]=G[i][j];
for(i=0;i&lt;n;i++) {
distance[i]=cost[startnode][i];
pred[i]=startnode;
visited[i]=0;
}
distance[startnode]=0;
visited[startnode]=1;
count=1;
while(count&lt;n-1) {
mindistance=INFINITY;
for(i=0;i&lt;n;i++)
if(distance[i]&lt;mindistance&amp;&amp;!visited[i]) {
mindistance=distance[i];
nextnode=i;
}
visited[nextnode]=1;
for(i=0;i&lt;n;i++)
if(!visited[i])
if(mindistance+cost[nextnode][i]&lt;distance[i]) {
distance[i]=mindistance+cost[nextnode][i];
pred[i]=nextnode;

}
count++;
}
for(i=0;i&lt;n;i++)
if(i!=startnode) {
cout&lt;&lt;&quot;\nDistance of
node&quot;&lt;&lt;i&lt;&lt;&quot;=&quot;&lt;&lt;distance[i];
cout&lt;&lt;&quot;\nPath=&quot;&lt;&lt;i;
j=i;
do {
j=pred[j];
cout&lt;&lt;&quot;&lt;-&quot;&lt;&lt;j;
}while(j!=startnode);
}
}
Output:
Distance of node1=1
Path=1&lt;-0
Distance of node2=5
Path=2&lt;-3&lt;-0
Distance of node3=3
Path=3&lt;-0
Distance of node4=6
Path=4&lt;-2&lt;-3&lt;-0
2)
#include&lt;bits/stdc++.h&gt;
using namespace std;
typedef pair&lt;int, int&gt; iPair;
struct Graph
{
int V, E;
vector&lt; pair&lt;int, iPair&gt; &gt; edges;
Graph(int V, int E)
{
this-&gt;V = V;
this-&gt;E = E;
}
void addEdge(int u, int v, int w)
{
edges.push_back({w, {u, v}});
}
int kruskalMST();
};
struct DisjointSets
{
int *parent, *rnk;
int n;
DisjointSets(int n)
{
this-&gt;n = n;
parent = new int[n+1];

rnk = new int[n+1];
for (int i = 0; i &lt;= n; i++)
{
rnk[i] = 0;
parent[i] = i;
}
}
int find(int u)
{
if (u != parent[u])
parent[u] =

find(parent[u]);

return parent[u];
}
void merge(int x, int y)
{
x = find(x), y = find(y);
if (rnk[x] &gt; rnk[y])
parent[y] = x;
else
parent[x] = y;
if (rnk[x] == rnk[y])
rnk[y]++;

}
};
int Graph::kruskalMST()
{
int mst_wt = 0;
sort(edges.begin(), edges.end());
DisjointSets ds(V);
vector&lt; pair&lt;int, iPair&gt; &gt;::iterator it;
for (it=edges.begin(); it!=edges.end();
it++)
{
int u = it-&gt;second.first;
int v = it-&gt;second.second;
int set_u = ds.find(u);
int set_v = ds.find(v);
if (set_u != set_v)
{
cout &lt;&lt; u &lt;&lt; &quot; - &quot; &lt;&lt; v

&lt;&lt; endl;

mst_wt += it-&gt;first;
ds.merge(set_u,

set_v);
}
}
return mst_wt;
}
int main()

{
int V = 9, E = 14;
Graph g(V, E);
g.addEdge(0, 1, 4);
g.addEdge(0, 7, 8);
g.addEdge(1, 2, 8);
g.addEdge(1, 7, 11);
g.addEdge(2, 3, 7);
g.addEdge(2, 8, 2);
g.addEdge(2, 5, 4);
g.addEdge(3, 4, 9);
g.addEdge(3, 5, 14);
g.addEdge(4, 5, 10);
g.addEdge(5, 6, 2);
g.addEdge(6, 7, 1);
g.addEdge(6, 8, 6);
g.addEdge(7, 8, 7);
cout &lt;&lt; &quot;Edges of MST are \n&quot;;
int mst_wt = g.kruskalMST();
cout &lt;&lt; &quot;\nWeight of MST is &quot; &lt;&lt;
mst_wt;
return 0;
}
Output:
Edges of MST are
6 - 7
2 - 8
5 - 6
0 - 1
2 - 5
2 - 3
0 - 7
3 - 4
Weight of MST is 37
3)
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;queue&gt;
using namespace std;
vector&lt;int&gt; bfs(const vector&lt;vector&lt;int&gt;&gt;&amp;
adj_list, int start, int target = -1)
{
int n = adj_list.size();
vector&lt;bool&gt; visited(n, false);
vector&lt;int&gt; order;
queue&lt;int&gt; q;
q.push(start);
visited[start] = true; while (!q.empty())
{
int u = q.front(); q.pop();
order.push_back(u);

for (int v : adj_list[u])
{
if (!visited[v])
{
q.push(v);
visited[v] = true;
}
}
}
if (target != -1 &amp;&amp; !visited[target])
{
return {};
}
return order;
}
int main()
{
vector&lt;vector&lt;int&gt;&gt; adj_list = {
{1, 2}, {0, 3, 4},
{0, 4},
{1, 4},
{1, 2, 3}
};
vector&lt;int&gt; order = bfs(adj_list, 0);
cout &lt;&lt; &quot;BFS traversal order: &quot;;
for (int i : order)
{
cout &lt;&lt; i &lt;&lt; &quot; &quot;;
}
cout &lt;&lt; endl;
return 0;
}
Output:
BFS traversal order: 0 1 2 3 4
4)
#include &lt;bits/stdc++.h&gt;
using namespace std;
class Graph {
public:
map&lt;int, bool&gt; visited;
map&lt;int, list&lt;int&gt; &gt; adj;
void addEdge(int v, int w);
void DFS(int v);
};
void Graph::addEdge(int v, int w)
{
adj[v].push_back(w);
}
void Graph::DFS(int v)
{
visited[v] = true;

cout &lt;&lt; v &lt;&lt; &quot; &quot;;
list&lt;int&gt;::iterator i;
for (i = adj[v].begin(); i != adj[v].end();
++i)

if (!visited[*i])
DFS(*i);

}
int main()
{
Graph g;
g.addEdge(0, 1);
g.addEdge(0, 2);
g.addEdge(1, 2);
g.addEdge(2, 0);
g.addEdge(2, 3);
g.addEdge(3, 3);
cout &lt;&lt; &quot;Following is Depth First
Traversal (starting from vertex 2) \n&quot;;
g.DFS(2);
return 0;
}
Output:
Following is Depth First Traversal (starting
from vertex 2)
2 0 1 3
5)
#include &lt;bits/stdc++.h&gt;
using namespace std;
#define V 4
#define INF 99999
void printSolution(int dist[][V]);
void floydWarshall(int dist[][V])
{
int i, j, k;
for (k = 0; k &lt; V; k++) {
for (i = 0; i &lt; V; i++) {
for (j = 0; j &lt; V; j++) {
if (dist[i][j] &gt;
(dist[i][k] + dist[k][j]) &amp;&amp; (dist[k][j] != INF&amp;&amp;
dist[i][k] !=INF))
dist[i][j] = dist[i][k] + dist[k][j];

}
}
}
printSolution(dist);
}
void printSolution(int dist[][V])
{

cout &lt;&lt; &quot;The following matrix shows
the shortest distances between every pair of
vertices \n&quot;;
for (int i = 0; i &lt; V; i++) {
for (int j = 0; j &lt; V; j++) {
if (dist[i][j] == INF)
cout &lt;&lt; &quot;INF&quot;
&lt;&lt; &quot; &quot;;

else
cout &lt;&lt;

dist[i][j] &lt;&lt; &quot; &quot;;
}
cout &lt;&lt; endl;
}
}
int main()
{
int graph[V][V] = { { 0, 5, INF, 10 },{ INF,
0, 3, INF },{ INF, INF, 0, 1 },{ INF, INF, INF, 0 } };
floydWarshall(graph);
return 0;
}
Output:
The following matrix shows the shortest
distances between every pair of vertices
0 5 8 9
INF 0 3 4
INF INF 0 1
INF INF INF 0
6)
#include&lt;iostream&gt;
#include &lt;list&gt;
#include &lt;stack&gt;
using namespace std;
class G {
int n;
list&lt;int&gt; *adj;
void topologicalSort(int v, bool visited[],
stack&lt;int&gt; &amp;Stack);
public:
G(int n); void addEd(int v, int w);
void topoSort();
};
G::G(int n) {
this-&gt;n = n;
adj = new list&lt;int&gt; [n];
}
void G::addEd(int v, int w) {
adj[v].push_back(w); }
void G::topologicalSort(int v, bool visited[],
stack&lt;int&gt; &amp;Stack) {

visited[v] = true; list&lt;int&gt;::iterator i;
for (i = adj[v].begin(); i != adj[v].end(); ++i)
if (!visited[*i])
topologicalSort(*i, visited, Stack);
Stack.push(v);
}
void G::topoSort() {
stack&lt;int&gt; Stack;
bool *visited = new bool[n];
for (int i = 0; i &lt; n; i++)
visited[i] = false;
for (int i = 0; i &lt; n; i++)
if (visited[i] == false)
topologicalSort(i, visited, Stack);
while (Stack.empty() == false) {
cout &lt;&lt; Stack.top() &lt;&lt; &quot; &quot;;
Stack.pop();
}
}
int main() {
G g(6);
g.addEd(4, 2);
g.addEd(5, 1);
g.addEd(4, 0);
g.addEd(3, 1);
g.addEd(1, 3);
g.addEd(3, 2);
cout &lt;&lt; &quot; Topological Sort of the given graph
\n&quot;;
g.topoSort();
return 0;
}
Output:
Topological Sort of the given graph
5 4 1 3 2 0
7)
#include &lt;limits.h&gt;
#include &lt;string.h&gt;
#include &lt;iostream&gt;
#include &lt;queue&gt;
using namespace std;
#define V 6
bool bfs(int rGraph[V][V], int s, int t, int
parent[]) {
bool visited[V];
memset(visited, 0, sizeof(visited));
queue&lt;int&gt; q;
q.push(s);
visited[s] = true;
parent[s] = -1;
while (!q.empty()) {

int u = q.front();
q.pop();
for (int v = 0; v &lt; V; v++) {
if (visited[v] == false &amp;&amp; rGraph[u][v] &gt; 0) {
q.push(v);
parent[v] = u;
visited[v] = true;
}
}
}
return (visited[t] == true);
}
int fordFulkerson(int graph[V][V], int s, int t) {
int u, v;
int rGraph[V][V];
for (u = 0; u &lt; V; u++)
for (v = 0; v &lt; V; v++)
rGraph[u][v] = graph[u][v];
int parent[V];
int max_flow = 0;
while (bfs(rGraph, s, t, parent)) {
int path_flow = INT_MAX;
for (v = t; v != s; v = parent[v]) {
u = parent[v];
path_flow = min(path_flow, rGraph[u][v]);
}
for (v = t; v != s; v = parent[v]) {
u = parent[v];
rGraph[u][v] -= path_flow;
rGraph[v][u] += path_flow;
}
max_flow += path_flow;
}
return max_flow;
}
int main() {
int graph[V][V] = {{0, 8, 0, 0, 3, 0},
{0, 0, 9, 0, 0, 0},
{0, 0, 0, 0, 7, 2},
{0, 0, 0, 0, 0, 5},
{0, 0, 7, 4, 0, 0},
{0, 0, 0, 0, 0, 0}};

cout &lt;&lt; &quot;Max Flow: &quot; &lt;&lt;
fordFulkerson(graph, 0, 5) &lt;&lt; endl;
}
Output:
Max Flow: 6
8)
#include &lt;iostream&gt;
using namespace std;
const int n = 4;
const int MAX = 1000000;
int dist[n + 1][n + 1] = {
{ 0, 0, 0, 0, 0 }, { 0, 0, 10, 15, 20 },
{ 0, 10, 0, 25, 25 }, { 0, 15, 25, 0, 30 },
{ 0, 20, 25, 30, 0 },
};
int memo[n + 1][1 &lt;&lt; (n + 1)];
int fun(int i, int mask)
{
if (mask == ((1 &lt;&lt; i) | 3))
return dist[1][i];
if (memo[i][mask] != 0)
return memo[i][mask];
int res = MAX;
for (int j = 1; j &lt;= n; j++)
if ((mask &amp; (1 &lt;&lt; j)) &amp;&amp; j != i

&amp;&amp; j != 1)

res = std::min(res,
fun(j, mask &amp; (~(1 &lt;&lt; i))) + dist[j][i]);
return memo[i][mask] = res;
}
int main()
{
int ans = MAX;
for (int i = 1; i &lt;= n; i++)
ans = std::min(ans, fun(i, (1 &lt;&lt;

(n + 1)) - 1) + dist[i][1]);
printf(&quot;The cost of most efficient tour
= %d&quot;, ans);
return 0;
}
Output:
The cost of most efficient tour = 80
9)
#include &lt;iostream&gt;
#include &lt;list&gt;
using namespace std;
class Graph
{
int V; list&lt;int&gt; *adj;

public:
Graph(int V) { this-&gt;V = V; adj = new
list&lt;int&gt;[V]; }
~Graph() { delete [] adj; }
void addEdge(int v, int w);
void greedyColoring();
};
void Graph::addEdge(int v, int w)
{
adj[v].push_back(w);
adj[w].push_back(v);
}
void Graph::greedyColoring()
{
int result[V];
result[0] = 0;
for (int u = 1; u &lt; V; u++)
result[u] = -1;
bool available[V];
for (int cr = 0; cr &lt; V; cr++)
available[cr] = false;
for (int u = 1; u &lt; V; u++)
{
list&lt;int&gt;::iterator i;
for (i = adj[u].begin(); i !=

adj[u].end(); ++i)

if (result[*i] != -1)
available[result[*i]] = true;
int cr;
for (cr = 0; cr &lt; V; cr++)
if (available[cr] ==

false)

break;
result[u] = cr;
for (i = adj[u].begin(); i !=

adj[u].end(); ++i)

if (result[*i] != -1)
available[result[*i]] = false;
}
for (int u = 0; u &lt; V; u++)
cout &lt;&lt; &quot;Vertex &quot; &lt;&lt; u &lt;&lt; &quot; ---

&gt; Color &quot;

&lt;&lt; result[u] &lt;&lt; endl;

}
int main()
{
Graph g1(5);
g1.addEdge(0, 1);

g1.addEdge(0, 2);
g1.addEdge(1, 2);
g1.addEdge(1, 3);
g1.addEdge(2, 3);
g1.addEdge(3, 4);
cout &lt;&lt; &quot;Coloring of graph 1 \n&quot;;
g1.greedyColoring();
Graph g2(5);
g2.addEdge(0, 1);
g2.addEdge(0, 2);
g2.addEdge(1, 2);
g2.addEdge(1, 4);
g2.addEdge(2, 4);
g2.addEdge(4, 3);
cout &lt;&lt; &quot;\nColoring of graph 2 \n&quot;;
g2.greedyColoring();
return 0;
}
Output:
Coloring of graph 1
Vertex 0 ---&gt; Color 0
Vertex 1 ---&gt; Color 1
Vertex 2 ---&gt; Color 2
Vertex 3 ---&gt; Color 0
Vertex 4 ---&gt; Color 1
Coloring of graph 2
Vertex 0 ---&gt; Color 0
Vertex 1 ---&gt; Color 1
Vertex 2 ---&gt; Color 2
Vertex 3 ---&gt; Color 0
Vertex 4 ---&gt; Color 3
10)
#include &lt;iostream&gt;
#include &lt;list&gt;
#include &lt;stack&gt;
using namespace std;
class Graph
{
int V;
list&lt;int&gt; *adj;
void fillOrder(int v, bool visited[],
stack&lt;int&gt; &amp;Stack);
void DFSUtil(int v, bool visited[]);
public:
Graph(int V);
void addEdge(int v, int w);
void printSCCs();
Graph getTranspose();
};
Graph::Graph(int V)
{

this-&gt;V = V;
adj = new list&lt;int&gt;[V];
}
void Graph::DFSUtil(int v, bool visited[])
{
visited[v] = true;
cout &lt;&lt; v &lt;&lt; &quot; &quot;;
list&lt;int&gt;::iterator i;
for (i = adj[v].begin(); i != adj[v].end();
++i)

if (!visited[*i])
DFSUtil(*i, visited);

}
Graph Graph::getTranspose()
{
Graph g(V);
for (int v = 0; v &lt; V; v++)
{
list&lt;int&gt;::iterator i;
for(i = adj[v].begin(); i !=

adj[v].end(); ++i)
{
g.adj[*i].push_back(v);
}
}
return g;
}
void Graph::addEdge(int v, int w)
{
adj[v].push_back(w);
}
void Graph::fillOrder(int v, bool visited[],
stack&lt;int&gt; &amp;Stack)
{
visited[v] = true;
list&lt;int&gt;::iterator i;
for(i = adj[v].begin(); i != adj[v].end();
++i)

if(!visited[*i])
fillOrder(*i, visited,

Stack);
Stack.push(v);
}
void Graph::printSCCs()
{
stack&lt;int&gt; Stack;
bool *visited = new bool[V];
for(int i = 0; i &lt; V; i++)
visited[i] = false;
for(int i = 0; i &lt; V; i++)

if(visited[i] == false)
fillOrder(i, visited,

Stack);
Graph gr = getTranspose();
for(int i = 0; i &lt; V; i++)
visited[i] = false;
while (Stack.empty() == false)
{
int v = Stack.top();
Stack.pop();
if (visited[v] == false)
{
gr.DFSUtil(v, visited);
cout &lt;&lt; endl;
}
}
}
int main()
{
Graph g(5);
g.addEdge(1, 0);
g.addEdge(0, 2);
g.addEdge(2, 1);
g.addEdge(0, 3);
g.addEdge(3, 4);
cout &lt;&lt; &quot;Following are strongly
connected components in given graph \n&quot;;
g.printSCCs();
return 0;
}
Output:
Following are strongly connected components
in given graph
0 1 2
3
4