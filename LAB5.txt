
1) Suppose you are standing in front of CL1 and you need to find the path to CR

#include <iostream>
using namespace std;
int main ()
{
    const int FLOOR1 = 15;
    const int FLOOR2 = 15;
    const int STAIRS = 5;		
    int building[FLOOR1 + FLOOR2][STAIRS];	
    for (int i = 0; i < FLOOR1; i++)
    {
        for (int j = 0; j < STAIRS; j++)
	    {
	        building[i][j] = i * STAIRS + j + 1;
	    }
    }
    for (int i = FLOOR1; i < FLOOR1 + FLOOR2; i++)
    {
        for (int j = 0; j < STAIRS; j++)
        {
            building[i][j] = (i-FLOOR1)*STAIRS + j + FLOOR1 + 1;
        }
    }
    int start, end;
    cout << "Enter starting CR number: ";   cin >> start;
    cout << "Enter ending CR number: ";    cin >> end;
    int current = start;
    bool takeStairs = (start <= STAIRS && end > STAIRS) || (start > STAIRS && end <= STAIRS);
    cout << "Path: " << current;
    while (current != end) 
    {
        if (takeStairs)
        {
            if (current <= STAIRS) 
            {
                cout << " -> Take stairs to second floor -> " << building[FLOOR1][0];
                current = building[FLOOR1][0];
            }
            else
            {
                cout << " -> Take stairs to first floor -> " << building[0][0];
                current = building[0][0];
            }
            takeStairs = false;
        }
        else if (current < end) 
        {
            if (current == STAIRS) 
            {
                takeStairs = true;
            }
            else 
            {
                int row = (current-1) / STAIRS;
                int col = (current-1) % STAIRS;
                if (col == STAIRS-1) 
                {
                    row++;col = 0;
                }
                else 
                {
                    col++;
                }
                current = building[row][col];
                cout << " -> " << current;
            }
        }
        else 
        {
            if (current == STAIRS+1) 
            {
                takeStairs = true;
            }
            else 
            {
                int row = (current-1) / STAIRS;
                int col = (current-1) % STAIRS;
                if (col == 0)
                {
                    row--;
                    col = STAIRS-1;
                }
                else
                {
                    col--;
                }
                current = building[row][col];
                cout << " -> " << current;
            }
        }
    }
    cout << endl;
    return 0;
}

Output:
 

2) In the previous problem find all the CRs in JUET.

#include <bits/stdc++.h>
using namespace std;
int main()
{
    const int numFloors = 2;
    const int crPerFloor = 15;
    int crNum = 1; 
    int crCount[numFloors] = {0};
    for (int floor = 1; floor <= numFloors; floor++) 
    {
        for (int i = 1; i <= crPerFloor; i++) 
        {
            crCount[floor-1]++;
            crNum++;
        }
    }
    cout << "Total number of CRs on first floor: " << crCount[0] << endl;
    cout << "Total number of CRs on second floor: " << crCount[1] << endl;
    return 0;
   }

Output:
 

3) Find 4 CRs whose sum is 56.

#include <iostream>
using namespace std;
int main() 
{
    const int numCRs = 30;
    int crSum = 56;
    bool found = false;
    for (int i = 1; i <= numCRs-3; i++) 
    {
        for (int j = i+1; j <= numCRs-2; j++) 
        {
            for (int k = j+1; k <= numCRs-1; k++) 
            {
                for (int l = k+1; l <= numCRs; l++) 
                {
                    if (i+j+k+l == crSum) 
                    {
                        cout << "The CRs whose sum is " << crSum << " are:" << i << ", " << j << ", " << k << ", " << l << endl;
                        found = true;
                    }
                }
            }
        }
    }
    if (!found)
    {
        cout << "No combination of 4 CRs adds up to " << crSum << endl;
    }
    return 0;
}

Output:
